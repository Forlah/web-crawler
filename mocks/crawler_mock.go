// Code generated by MockGen. DO NOT EDIT.
// Source: crawler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	reflect "reflect"
	crawler "web-crawler/crawler"
	model "web-crawler/model"

	gomock "github.com/golang/mock/gomock"
)

// MockCrawler is a mock of Crawler interface.
type MockCrawler struct {
	ctrl     *gomock.Controller
	recorder *MockCrawlerMockRecorder
}

// MockCrawlerMockRecorder is the mock recorder for MockCrawler.
type MockCrawlerMockRecorder struct {
	mock *MockCrawler
}

// NewMockCrawler creates a new mock instance.
func NewMockCrawler(ctrl *gomock.Controller) *MockCrawler {
	mock := &MockCrawler{ctrl: ctrl}
	mock.recorder = &MockCrawlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrawler) EXPECT() *MockCrawlerMockRecorder {
	return m.recorder
}

// FilterLinks mocks base method.
func (m *MockCrawler) FilterLinks(arg0 []model.Link) []model.Link {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterLinks", arg0)
	ret0, _ := ret[0].([]model.Link)
	return ret0
}

// FilterLinks indicates an expected call of FilterLinks.
func (mr *MockCrawlerMockRecorder) FilterLinks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterLinks", reflect.TypeOf((*MockCrawler)(nil).FilterLinks), arg0)
}

// ReadLink mocks base method.
func (m *MockCrawler) ReadLink(body io.Reader) []model.Link {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadLink", body)
	ret0, _ := ret[0].([]model.Link)
	return ret0
}

// ReadLink indicates an expected call of ReadLink.
func (mr *MockCrawlerMockRecorder) ReadLink(body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLink", reflect.TypeOf((*MockCrawler)(nil).ReadLink), body)
}

// SetInitialUrl mocks base method.
func (m *MockCrawler) SetInitialUrl(url string) *crawler.CrawlerHelper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInitialUrl", url)
	ret0, _ := ret[0].(*crawler.CrawlerHelper)
	return ret0
}

// SetInitialUrl indicates an expected call of SetInitialUrl.
func (mr *MockCrawlerMockRecorder) SetInitialUrl(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInitialUrl", reflect.TypeOf((*MockCrawler)(nil).SetInitialUrl), url)
}
